Scale for project minitalk
You should evaluate 1 student in this team
________________


Introduction
Please comply with the following rules:


- Remain polite, courteous, respectful, and constructive throughout the
evaluation process. The well-being of the community depends on it.


- Identify with the student or group whose work is evaluated the possible
dysfunctions in their project. Take the time to discuss and debate the
problems that may have been identified.


- You must consider that there might be some differences in how your peers
might have understood the project's instructions and the scope of its
functionalities. Always keep an open mind and grade them as honestly as
possible. The pedagogy is useful only and only if the peer-evaluation is
done seriously.
Guidelines
- Only grade the work that was turned in the Git repository of the evaluated
student or group.


- Double-check that the Git repository belongs to the student(s). Ensure that
the project is the one expected. Also, check that "git clone" is used in an
empty folder.


- Check carefully that no malicious aliases were used to fool you and make you
evaluate something that is not the content of the official repository.


- To avoid any surprises and if applicable, review together any scripts used
to facilitate the grading (scripts for testing or automation).


- If you have not completed the assignment you are going to evaluate, you have
to read the entire subject before starting the evaluation process.


- Use the available flags to report an empty repository, a non-functioning
program, a Norm error, cheating, and so forth.
In these cases, the evaluation process ends and the final grade is 0,
or -42 in case of cheating. However, except for cheating, student are
strongly encouraged to review together the work that was turned in,
to identify any mistakes that shouldn't be repeated in the future.
________________


Attachments
subject.pdf
Preliminaries
If cheating is suspected, the evaluation stops here. Use the "Cheat" flag to report it. Take this decision calmly, wisely, and please, use this button with caution.
Preliminary tests
- Defense can only happen if the evaluated student or group is present.
This way everybody learns by sharing knowledge.
- If no work has been submitted (or wrong files, wrong directory, or
wrong filenames), the grade is 0, and the evaluation process ends.
- No Empty git (= nothing in git repository).
- No Norm error.
- Cheating (= -42).
- No compilation error or re-link.


If all of these points are valid, check yes and continues the correction.
If not use the appropriate flag at the end of the scale!
 Yes  No
________________


General instructions
General instructions
- The Makefile compiles both executables -> 1 point
- Server name is 'server' and show his PID at launch -> 2 point
- Client name is 'client' and launches asfollowing:
'./client PID_SERVEUR STRING_TO_PASS' -> 2 point
Rate it from 0 (failed) through 5 (excellent)
________________


________________


Mandatory part
This project is an introduction to signals Check the code and usage of signals only to communicate.
Transmission of messages
It's possible to pass on a message of any size


Received messages must be displayed by the server, and must be obviously
corrects!
The server should never get stuck or print bad characters.
 Yes  No
Simple setup
- Server can receive multi-string without being relaunched
-> 1 point
- Only one global per program, with justification (or no global)
-> 1 point
- The communication is achieves ONLY with the signals SIGUSR1 and SIGUSR2
-> 3 points


Received messages must be displayed by the server, and must be obviously
corrects!
Rate it from 0 (failed) through 5 (excellent)
________________


________________


Bonus
Evaluate the bonus part if, and only if, the mandatory part has been entirely and perfectly done, and the error management handles unexpected or bad usage. In case all the mandatory points were not passed during the defense, bonus points must be ignored.
Unicode
Unicode characters are supported in the client and server.
 Yes  No
Acknoledgment
The client waits for acknowledgment from the server to send the next signal.
 Yes  No