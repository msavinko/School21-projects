Вместо
sometype foo(int n)
{
    int a[n];
    ...
    a[k] = something;
    ...
}
Просто делайте
sometype foo(int n)
{
    int *a;

    a = (int *)malloc(n * sizeof(int));
    if (a == NULL)
//      Handle memory allocation error
    ...
    a[k] = something;
    ...
    free(a);
    ...
}
тред имеет место быть, ибо VLA запрещены по норме и это сразу 0.

----
https://nullprogram.com/blog/2019/10/27/
а можешь развить свою мысль про minitalk и sleep? интересно, без наброса. 
предполагаю, почему ты так говоришь, но хочется убедиться.

---------
А я даже не знаю, куда её дальше развивать. Могу лишь повторить — в хорошо 
проработанном minitalk вызовы sleep не нужны. Это вообще самый убогий способ 
синхронизации процессов, работоспособность такого способа в прямой зависимости 
от производительности и загруженности целевой платформы.

Сигналы разрешены? Вот и используйте их для синхронизации, а не “авось Xµs хватит”. 
Когда-то — не хватит.

perfect minitalk в условиях Subject написать невозможно, поскольку интервальные 
таймеры не в числе разрешённых к использованию. Но и задача ведь не в написании 
perfect minitalk, студенту надо разобраться в таких сущностях как асинхронность, 
реентерабельность, context-switching, etc...

Я уже говорил, что считаю пункт в правилах удалённых проверок, декларирующий приоритет 
работоспособности решения на системе проверяемого, отвратительным и даже губительным. 
Все проекты 42/21, которые я видел, и которые прямо не обозначают используемую ОС 
(как, например, Born2BeRoot) обязаны одинаково работать на любой системе, считающейся 
unix или хотя бы unix-like. И если Васины решения школьных проектов якобы работают у 
него на пингвиниксе, но не работают в MacOS/FreeBSD/AIX/Illumos/etc, то это хреновые 
решения, и даже у него они скорее всего работоспособны только в частных случаях.

——

Ок, это и хотелось услышать, потому что то, что крылось за той фразой про sleep 
неприменимо к сабжекту, и мне стало интересно, может быть есть какой то интересный 
способ обхода. Вопрос закрыт)))

——

“хорошо проработанный minitalk” в рамках ограничений Subject и “perfect minital” — 
не одно и то же. Но у них есть общее свойство — отсутствие sleep.
